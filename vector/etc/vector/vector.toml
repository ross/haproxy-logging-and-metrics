[api]
  enabled = true
  address = "0.0.0.0:8686"

[sources.haproxy]
  type = "syslog"
  address = "0.0.0.0:514"
  mode = "udp"

[transforms.parse_logfmt]
type = "remap"
inputs = ["haproxy"]
source = '''
# parse logfmt
., err = parse_key_value(.message)
if err != null {
  log("Unable to parse logfmt: " + err, level: "error")
} else {
  ## type conversion

  .bytes_response = to_int(.bytes_response) ?? .bytes_response
  .bytes_request = to_int(.bytes_request) ?? .bytes_request
  .client_port = to_int(.client_port) ?? .client_port

  if .fc_reordering == "-" {
    del(.fc_reordering)
  } else if exists(.fc_reordering) {
    .fc_reordering = to_int(.fc_reordering) ?? .fc_reordering
  }

  if .fc_retrans == "-" {
    del(.fc_retrans)
  } else if exists(.fc_retrans) {
    .fc_retrans = to_int(.fc_retrans) ?? .fc_retrans
  }

  if .fc_rtt == "-" {
    del(.fc_rtt)
  } else if exists(.fc_rtt) {
    .fc_rtt = to_int(.fc_rtt) ?? .fc_rtt
  }

  if .fc_rttvar == "-" {
    del(.fc_rttvar)
  } else if exists(.fc_rttvar) {
    .fc_rttvar = to_int(.fc_rttvar) ?? .fc_rttvar
  }

  .frontend_port = to_int(.frontend_port) ?? .frontend_port
  .request_timestamp = to_int(.request_timestamp) ?? .request_timestamp
  .retries = to_int(.retries) ?? .retries

  if .status_code == "-1" {
    del(.status_code)
  } else {
    .status_code = to_int(.status_code) ?? .status_code
    # nested if b/c of this bug https://github.com/timberio/vector/issues/8284
    .status_class = if .status_code < 200 {
      "1xx"
    } else {
      if .status_code < 300 {
        "2xx"
      } else {
        if .status_code < 400 {
          "3xx"
        } else {
          if .status_code < 500 {
            "4xx"
          } else {
            "5xx"
          }
        }
      }
    }
  }

  if .time_backend_connect == "-1" {
    del(.time_backend_connect)
  } else if exists(.time_backend_connect) {
    .time_backend_connect = to_int(.time_backend_connect) ?? .time_backend_connect
  }

  if .time_backend_response == "-1" {
    del(.time_backend_response)
  } else if exists(.time_backend_response) {
    .time_backend_response = to_int(.time_backend_response) ?? .time_backend_response
  }

  .time_connect = to_int(.time_connect) ?? .time_connect
  .time_idle = to_int(.time_idle) ?? .time_idle

  if .time_request == "-1" {
    del(.time_request)
  } else if exists(.time_request) {
    .time_request = to_int(.time_request) ?? .time_request
  }

  .time_response = to_int(.time_response) ?? .time_response
  .time_total = to_int(.time_total) ?? .time_total
  .time_user_est = to_int(.time_user_est) ?? .time_user_est

  if .time_waiting == "-1" {
    del(.time_waiting)
  } else if exists(.time_waiting) {
    .time_waiting = to_int(.time_waiting) ?? .time_waiting
  }

  ## Cleanup (of things that don't require conversion)

  if .host_header == "" {
    del(.host_header)
  }

  if .real_ip == "-" {
    del(.real_ip)
  }

  if .request_id == "-" {
    del(.request_id)
  }

  if .ssl_ciphers == "-" {
    del(.ssl_ciphers)
  }

  if .ssl_version == "-" {
    del(.ssl_version)
  }

  if .user_agent == "" {
    del(.user_agent)
  }
}
'''

[transforms.haproxy_metrics]
  type = "log_to_metric"
  inputs = ["parse_logfmt"]

  [[transforms.haproxy_metrics.metrics]]
    field = "time_response"
    name = "time_response"
    namespace = "haproxy"
    type = "histogram"

    tags.backend_name = "{{backend_name}}"
    tags.frontend_name = "{{frontend_name}}"
    tags.method = "{{method}}"
    tags.status_class = "{{status_class}}"

  [[transforms.haproxy_metrics.metrics]]
    field = "bytes_response"
    increment_by_value = true
    name = "bytes_response"
    namespace = "haproxy"
    type = "counter"

    tags.backend_name = "{{backend_name}}"
    tags.frontend_name = "{{frontend_name}}"
    tags.method = "{{method}}"
    tags.status_class = "{{status_class}}"

  [[transforms.haproxy_metrics.metrics]]
    field = "bytes_request"
    increment_by_value = true
    name = "bytes_request"
    namespace = "haproxy"
    type = "counter"

    tags.backend_name = "{{backend_name}}"
    tags.frontend_name = "{{frontend_name}}"
    tags.method = "{{method}}"
    tags.status_class = "{{status_class}}"

  [[transforms.haproxy_metrics.metrics]]
    field = "termination_state"
    name = "termination_state"
    namespace = "haproxy"
    type = "counter"

    tags.backend_name = "{{backend_name}}"
    tags.frontend_name = "{{frontend_name}}"
    tags.method = "{{method}}"
    tags.status_class = "{{status_class}}"
    tags.termination_state = "{{termination_state}}"

  [[transforms.haproxy_metrics.metrics]]
    field = "fc_retrans"
    increment_by_value = true
    name = "fc_retrans"
    namespace = "haproxy"
    type = "counter"

    tags.backend_name = "{{backend_name}}"
    tags.frontend_name = "{{frontend_name}}"
    tags.method = "{{method}}"
    tags.status_class = "{{status_class}}"
    # TODO: ASN, country

  [[transforms.haproxy_metrics.metrics]]
    field = "fc_rtt"
    increment_by_value = true
    name = "fc_rtt"
    namespace = "haproxy"
    type = "counter"

    tags.backend_name = "{{backend_name}}"
    tags.frontend_name = "{{frontend_name}}"
    tags.method = "{{method}}"
    tags.status_class = "{{status_class}}"
    # TODO: ASN, country

  [[transforms.haproxy_metrics.metrics]]
    field = "time_backend_connect"
    increment_by_value = true
    name = "time_backend_connect"
    namespace = "haproxy"
    type = "counter"

    tags.backend_name = "{{backend_name}}"
    tags.frontend_name = "{{frontend_name}}"
    tags.method = "{{method}}"
    tags.status_class = "{{status_class}}"

[sinks.stdout]
  type = "console"
  inputs = ["haproxy_metrics", "parse_logfmt"]
  target = "stdout"
  encoding.codec = "json"
